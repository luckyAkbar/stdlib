// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/luckyAkbar/stdlib/mail (interfaces: Client)

// Package mail_mock is a generated GoMock package.
package mail_mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mail "github.com/luckyAkbar/stdlib/mail"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetClientName mocks base method.
func (m *MockClient) GetClientName() mail.ClientSignature {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientName")
	ret0, _ := ret[0].(mail.ClientSignature)
	return ret0
}

// GetClientName indicates an expected call of GetClientName.
func (mr *MockClientMockRecorder) GetClientName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientName", reflect.TypeOf((*MockClient)(nil).GetClientName))
}

// SendEmail mocks base method.
func (m *MockClient) SendEmail(arg0 context.Context, arg1 *mail.Mail) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockClientMockRecorder) SendEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockClient)(nil).SendEmail), arg0, arg1)
}

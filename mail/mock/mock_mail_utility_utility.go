// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/luckyAkbar/stdlib/mail (interfaces: Utility)

// Package mail_mock is a generated GoMock package.
package mail_mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mail "github.com/luckyAkbar/stdlib/mail"
)

// MockUtility is a mock of Utility interface.
type MockUtility struct {
	ctrl     *gomock.Controller
	recorder *MockUtilityMockRecorder
}

// MockUtilityMockRecorder is the mock recorder for MockUtility.
type MockUtilityMockRecorder struct {
	mock *MockUtility
}

// NewMockUtility creates a new mock instance.
func NewMockUtility(ctrl *gomock.Controller) *MockUtility {
	mock := &MockUtility{ctrl: ctrl}
	mock.recorder = &MockUtilityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUtility) EXPECT() *MockUtilityMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockUtility) SendEmail(arg0 context.Context, arg1 *mail.Mail) (string, mail.ClientSignature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(mail.ClientSignature)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockUtilityMockRecorder) SendEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockUtility)(nil).SendEmail), arg0, arg1)
}
